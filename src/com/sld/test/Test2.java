package com.sld.test;

import java.util.*;

/**
 * @Author: shaold
 * @since 2020年11月4日 15:07
 */
public class Test2 {
    //给数组做一组标志位数组
    public static void main(String[] args) {
        Integer[] nums1 = {40,99,50011665,50010404,50011740,30,1625,50006843,16,50006842,50008090,50018222,1201,50007218,1101,11,20,50024099,124852003,124044001,50019780,50012164,1512,14,50018264,50018004,50012082,50022703,50002768,122718004,50012100,50011972,28,50010788,50023282,1801,126762001,50013864,50468001,50011397,35,122650005,50008165,25,50014812,50022517,50008163,50020579,50020332,50020808,27,122852001,124050001,50020611,50020857,50020485,50008164,50023804,50026800,122952001,124458005,2813,50016349,50020275,50023717,50016348,122950001,50008141,21,50026316,50016422,50002766,122928002,50050359,50025705,124354002,50013886,50010728,50510002,50011699,50012029,122684003,29,50025707,23,50454031,50017300,124484008,33,50011949,34,50025111,50008075,50025110,50025004,50026555,50014927,50025618,50014811,50158001,50007216,50019095,123536002,127458007,98,127492006,125102006,201173506,127442006,201307427,127508003,126700003,127450004,124468001,124466001,124844002,50023724,201162107,127876007,127484003,201156706,201402901,124568010,120894001,127452002,124470001,201207402,124242008,121266001,124698018,50074001,26,50024971};
        Integer[] nums2 = {50011718,50011277,50000671,50010850,50008898,123216004,50000697,162104,50000697,50011277,50011277,162201,162116,50011277,50000852,1623,162205,162201,162205,50008900,50016845,50010513,50002766,123454001,50012392,126778003,50008064,50002766,123222004,126472004,124312003,50002256,50008141,50016422,50026800,50011993,121474010,50011977,50011982,50010808,121426007,50010790,50010790,1801,121404031,50010798,50010788,50010817,50014259,121396029,121396013,1801,50023751,216505,50010895,50023202,50016349,50016348,210211,50018977,122952001,50025705,50005058,121408043,50023717,29,30,50011123,50000436,50010159,50010402,30,50010158,124732001,50000557,3035,50010167,3035,50011165,50011130,50012027,50012036,50012036,50006843,50011740,50006843,50012042,50006843,50012027,201306507,50006843,50011740,50011746,50012349,50012051,50006843,50011740,50006843,50011740,1205,150704,50012587,50050366,50009211,50002415,50012082,50012082,121454005,350213,150708,11,350407,50010537,122650005,25,50014812,50022517,50018813,50009522,50012546,50005962,50012010,122690003,50012019,50012010,121434005,50006842,50006842,50006842,50012010,122654005,26,33,24,50012720,50012724,50012717,50011905,50018004,50011418,261710,121466037,50012731,50013865,50014238,50014239,50024815,50013875,50013869,50468001,121466005,50010368,302910,50009032,50007003,50020808,50008881,50008882,50012773,50006122,50006846,121412004,50012775,50012781,50008884,50012772,50008779,50002777,213002,50008163,50000583,50008164,50024690,50024688,126700003,50016348,50002794,50010728,50010728,50013886,50010728,50010728,50016665,50010728};
        Test2 t2 = new Test2();
        Integer[] ints = t2.getB(nums1, nums2);
        Arrays.sort(ints);
        showNonDuplicateArray(ints);
//        for (int i = 0; i < ints.length; i++) {
//            System.out.print(ints[i] + ",");
//        }
    }

    //使用Map，数组作为键值key，计数器作为value
    public int[] intersect2(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<nums1.length;i++) {
            Integer val=map.get(nums1[i]);
            map.put(nums1[i], (val==null)?1:++val);
        }
        ArrayList<Integer> al = new ArrayList<Integer>();
        for(int i=0,val;i<nums2.length;i++) {
            if(map.containsKey(nums2[i]) && (val=map.get(nums2[i]))>0) {
                al.add(nums2[i]);
                map.put(nums2[i], --val);
            }
        }

        int[] in = new int[al.size()];
        int e=0;
        for(int i:al)
            in[e++] = i;
        return in;

    }

    private static Integer[] getJ(Integer[] m, Integer[] n)
    {
        List<Integer> rs = new ArrayList<Integer>();

        // 将较长的数组转换为set
        Set<Integer> set = new HashSet<Integer>(Arrays.asList(m.length > n.length ? m : n));

        // 遍历较短的数组，实现最少循环
        for (Integer i : m.length > n.length ? n : m)
        {
            if (set.contains(i))
            {
                rs.add(i);
            }
        }

        Integer[] arr = {};
        return rs.toArray(arr);
    }

    private static Integer[] getB(Integer[] m, Integer[] n)
    {
        // 将数组转换为set集合
        Set<Integer> set1 = new HashSet<Integer>(Arrays.asList(m));
        Set<Integer> set2 = new HashSet<Integer>(Arrays.asList(n));

        // 合并两个集合
        set1.addAll(set2);

        Integer[] arr = {};
        return set1.toArray(arr);
    }

    public static void showNonDuplicateArray(Integer[] a) {
        Integer[] newArr = new Integer[a.length];

        int index = 0; // 新数组存储元素索引(或者说无重复的个数)

        outer: for (int i = 0; i < a.length; i++) {
            for (int j = i + 1; j < a.length; j++) {
                //当数据重复时,跳出外圈循环
                if (a[i] == a[j]) {
                    continue outer;
                }
            }
            // 后面没有与当前元素重复的值,保存这个数
            newArr[index] = a[i];
            index++;
        }
        // 新数组中存储着无重复的值和后面一些0
        int[] result = new int[index];
        for (int i = 0; i < index; i++) { // 遍历有效值个数
            result[i] = newArr[i];
        }
        System.out.println(Arrays.toString(result));


    }
}
